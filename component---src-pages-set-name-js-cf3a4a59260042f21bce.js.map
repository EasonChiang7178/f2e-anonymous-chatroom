{"version":3,"sources":["webpack:///./src/components/Panels/SetNicknamePanel/index.js","webpack:///./src/pages/set-name.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/layouts/SEO.js"],"names":["SetNicknamePanel","_ref","defaultNickname","onConfirmBtnClick","_useState","useState","nicknameValue","setNicknameValue","isButtonDisabled","react_default","a","createElement","panels_css","index_css","value","placeholder","onChange","e","currentTarget","className","disabled","onClick","SetNicknamePanelContainer","_useContext","useContext","ChatroomContext","setUsername","username","SetNicknamePanel_SetNicknamePanel","nickname","navigate","SetNamePage","Fragment","SEO","title","Panels_SetNicknamePanel","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","data","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"yJAQMA,EAAmB,SAAAC,GAA4C,IAAzCC,EAAyCD,EAAzCC,gBAAiBC,EAAwBF,EAAxBE,kBAAwBC,EACzBC,mBAASH,GAA5CI,EAD4DF,EAAA,GAC7CG,EAD6CH,EAAA,GAI7DI,GAAmBF,EAEzB,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,aACAJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAeC,MAAOR,EAAeS,YAAY,OAAOC,SARrC,SAAAC,GAAC,OAAIV,EAAiBU,EAAEC,cAAcJ,UAUzDL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEO,WAAgC,IAArBX,EAA6B,GAAK,WAC7CY,SAAUZ,EACVa,QAAS,kBAAMlB,EAAkBG,KAHnC,SAiCOgB,EAhBmB,WAAM,IAAAC,EACJC,qBAAWC,KAArCC,EAD8BH,EAC9BG,YAAaC,EADiBJ,EACjBI,SAOrB,OACElB,EAAAC,EAAAC,cAACiB,EAAD,CACE1B,gBAAiByB,EACjBxB,kBARsB,SAAC0B,GACzBH,EAAYG,GACZC,YAAS,0BC9BEC,UAPK,kBAClBtB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsB,SAAA,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAKC,MAAM,iBACXzB,EAAAC,EAAAC,cAACwB,EAAD,6BCRJ,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/C,IAAAK,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAA,EAAAI,EAAAC,EAAA,sBAAAF,EAAA,WAAAH,EAAA,KAAAA,EAAA,IAcyBM,QAAOC,QAELC,IAAMC,cAAc,gFCMhCC,UAjBU,SAAAnD,GAAiC,IAA9BoD,EAA8BpD,EAA9BoD,SAAUC,EAAoBrD,EAApBqD,cACpC,OAAKA,EAGEJ,IAAMvC,cAAc4C,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV,uFCKX,SAASzB,EAAThC,GAAiD,IAAlC0D,EAAkC1D,EAAlC0D,YAAaC,EAAqB3D,EAArB2D,KAAMC,EAAe5D,EAAf4D,KAAM3B,EAASjC,EAATiC,MAC9B4B,EADuCC,EAAAC,KACvCF,KAcFG,EAAkBN,GAAeG,EAAKI,aAAaP,YAEzD,OACEQ,EAAAzD,EAAAC,cAACyD,EAAA1D,EAAD,CACE2D,eAAgB,CACdT,QAEF1B,MAAOA,EACPoC,cAAa,KACbT,KAAM,CACJ,CACEU,KAAI,cACJC,QAASP,GAEX,CACEQ,SAAQ,WACRD,QAAStC,GAEX,CACEuC,SAAQ,iBACRD,QAASP,GAEX,CACEQ,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASV,EAAKI,aAAaQ,QAE7B,CACEH,KAAI,gBACJC,QAAStC,GAEX,CACEqC,KAAI,sBACJC,QAASP,IAEXU,OAAOd,KAKf5B,EAAI2C,aAAe,CACjBhB,KAAI,KACJC,KAAM,GACNF,YAAW,IAUE1B","file":"component---src-pages-set-name-js-cf3a4a59260042f21bce.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { navigate } from \"gatsby\";\n\nimport { PanelContainer, Panel, Button } from \"../panels.css\";\nimport { Label, NicknameInput } from \"./index.css\";\nimport ChatroomContext from \"../../../contexts/ChatroomContext\";\n\nconst SetNicknamePanel = ({ defaultNickname, onConfirmBtnClick }) => {\n  const [nicknameValue, setNicknameValue] = useState(defaultNickname)\n  const onNicknameChange = e => setNicknameValue(e.currentTarget.value)\n\n  const isButtonDisabled = nicknameValue ? false : true\n\n  return (\n    <PanelContainer>\n      <Panel>\n        <Label>暱稱聊天</Label>\n        <NicknameInput value={nicknameValue} placeholder=\"輸入暱稱\" onChange={onNicknameChange} />\n\n        <Button\n          className={isButtonDisabled === false ? \"\" : \"disabled\"}\n          disabled={isButtonDisabled}\n          onClick={() => onConfirmBtnClick(nicknameValue)}\n        >\n          確定\n        </Button>\n      </Panel>\n    </PanelContainer>\n  );\n};\n\nSetNicknamePanel.propTypes = {\n  defaultNickname: PropTypes.string,\n  onConfirmBtnClick: PropTypes.func\n};\n\nconst SetNicknamePanelContainer = () => {\n  const { setUsername, username } = useContext(ChatroomContext)\n\n  const onConfirmBtnClick = (nickname) => {\n    setUsername(nickname);\n    navigate(\"/chatroom\");\n  };\n\n  return (\n    <SetNicknamePanel\n      defaultNickname={username}\n      onConfirmBtnClick={onConfirmBtnClick}\n    />\n  );\n};\n\nexport default SetNicknamePanelContainer;\n","import React from \"react\";\n\nimport SetNicknamePanel from \"../components/Panels/SetNicknamePanel\";\nimport SEO from \"../layouts/SEO\";\n\nconst SetNamePage = () => (\n  <>\n    <SEO title=\"匿名聊天室 | 輸入暱稱\" />\n    <SetNicknamePanel />\n  </>\n);\n\nexport default SetNamePage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={`%s`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default SEO;\n"],"sourceRoot":""}